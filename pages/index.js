import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { app , database } from '../firebaseConfig'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import { collection,addDoc,getDocs,doc,updateDoc,deleteDoc } from 'firebase/firestore'

export default function Home() {
  //create collection
  const databaseRef = collection(database,'CRUD Data');
  const [name,setName] = useState('');
  const [ID,setID] = useState(null);
  const [age,setAge] = useState(null);
  const [fireData,setFireData] = useState([]);
  const [isUpdate,setIsUpdate] = useState(false);
  let router = useRouter();
  
  useEffect(() => {
    let token = sessionStorage.getItem('Token');
    if(token){
      getData()
    }
    if(!token){
        router.push('/register');
    }
  }, [])
  
  //firestore add data
  const addData = () =>{
    addDoc(databaseRef,{
      name:name,
      age:Number(age)
    }).then(() =>{
      alert('Data Sent');
      getData();
      setName('');
      setAge(null);
    })
    .catch((err) =>{
      console.error(err);
    })
  }

  //firestore get data
  const getData = async() =>{
   await getDocs(databaseRef).then((response) =>{
      setFireData(response.docs.map((data) =>{
        return {...data.data(),id:data.id}
      }));
   })
  }

  //firestore get ID
  const getID = (id,name,age) =>{
    setID(id)
    setName(name)
    setAge(age)
    setIsUpdate(true)
  }

  //firestore updatedata
  const updateFields = () =>{
    let fieldToEdit = doc(database,'CRUD Data', ID);
    updateDoc(fieldToEdit,{
      name:name,
      age:Number(age)
    }).then(() =>{
      alert('Data Updated');
      getData();
      setName('')
      setAge(null)
      setIsUpdate(false)
    }).catch((err) =>{
      console.log(err);
    })
  }

  //firestore delete data
  const deleteDocument = (id) =>{
    let fieldToEdit = doc(database,'CRUD Data', id);
    deleteDoc(fieldToEdit).then(() =>{
      alert('Data Deleted');
      getData()
    }).catch((err) =>{
      alert('Cannot Delete that field..');
    })
  }

  const logout = () =>{
    sessionStorage.removeItem('Token')
    router.push('/login')
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Next CRUD AUTH</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <button onClick={logout}>Log Out</button>
        </div>
        <h1>Home</h1>
        <input placeholder='Name'
        type='text'
        className={styles.inputBox}
        value={name}
        onChange={event =>setName(event.target.value)}
        />
        <input placeholder='Age'
        type='number'
        className={styles.inputBox}
        value={age}
        onChange={event =>setAge(event.target.value)}
        />
        {isUpdate ? (
          <button className={styles.button}
          onClick={updateFields}>UPDATE</button>
        ):(
          <button className={styles.button}
        onClick={addData}>ADD</button>
        )}
        <div>
          {fireData.map((data) =>{
            return(
              <div className={styles.flex} key={data.id}>
                <h3>Name:{data.name}</h3>
                <p>Age:{data.age}</p>
                <button className={styles.button}
                onClick={() => getID(data.id,data.name,data.age)}>Update</button>
                <button className={styles.button}
                onClick={() => deleteDocument(data.id)}>Delete</button>
              </div>
            )
          })}
        </div>
      </main>
    </div>
  )
}